import Chat from "#models/Chat.Model.js";
import Message from "#models/Message.Model.js";
import { getGeminiResponse } from "#utils/getGeminiResponse.js";

/**
 * @swagger
 * /api/message:
 *   post:
 *     summary: Create a new message in a chat and generate a Gemini AI response
 *     tags:
 *       - Message
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - chatId
 *             properties:
 *               chatId:
 *                 type: string
 *                 description: The ID of the chat to which the message belongs
 *               content:
 *                 type: string
 *                 description: The textual content of the message (optional if imageUrl is provided)
 *               imageUrl:
 *                 type: string
 *                 format: uri
 *                 description: The URL of the image to include in the message (optional if content is provided)
 *     responses:
 *       201:
 *         description: Message created successfully and added to chat
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 timestamp:
 *                   type: string
 *                   format: date-time
 *                 message:
 *                   type: string
 *                   example: Message created and added to chat
 *                 data:
 *                   type: object
 *                   properties:
 *                     text:
 *                       type: string
 *                       description: The response generated by Gemini
 *       400:
 *         description: Bad request, missing required fields
 *       404:
 *         description: Chat not found
 *       500:
 *         description: Internal server error or Gemini API failure
 */

export const createMessage = async (req, res) => {
  try {
    const { chatId, content, imageUrl } = req.body;

    if (!chatId) {
      throw { status: 400, message: "chatId is required" };
    }

    if (!content && !imageUrl) {
      throw { status: 400, message: "Either content or imageUrl is required" };
    }

    const chat = await Chat.findById(chatId);
    if (!chat) {
      throw { status: 404, message: "Chat not found" };
    }

    //1. Create a new message with content or imageUrl
    const message = new Message({ content, imageUrl });

    //2. Return Gemini Reponse
    const geminiResponse = await getGeminiResponse(content, imageUrl);
    if (geminiResponse.error) {
      throw { status: 500, message: geminiResponse.error };
    }

    //3. Add Gemini response to message and save
    message.geminiResponse = geminiResponse.text;
    await message.save();

    //4. Add message to chat and save
    chat.messages.push(message._id);
    await chat.save();

    res.status(201).json({
      success: true,
      timestamp: new Date().toISOString(),
      message: "Message created and added to chat",
      data: geminiResponse,
    });
  } catch (err) {
    console.error("Error creating message:", err);
    res.status(err.status || 500).json({
      success: false,
      timestamp: new Date().toISOString(),
      message: "Failed to create message",
      error: err.message || "Internal Server Error",
    });
  }
};
